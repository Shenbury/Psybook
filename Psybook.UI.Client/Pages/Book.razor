@page "/Book"
@page "/Book/{BookingId:guid?}"
@using Microsoft.Extensions.Logging
@using Psybook.Objects.DbModels
@using Psybook.Objects.Enums
@using Psybook.Services.UI.DataLoaders
@using Psybook.Shared.Dictionary
@using Psybook.Shared.PageModels
@using FluentValidation
@using MudBlazor
@using Psybook.UI.Client.Components
@inherits BasePageComponent
@inject IBookingLoaderService bookingLoaderService
@inject ILogger<Book> Logger

<PageTitle>@(_isEditMode ? "Edit" : "Book") Experience - WMSP</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudPaper Elevation="0" Class="pa-6">
        <!-- Header Section -->
        <MudStack Spacing="4" Class="mb-6">
            <MudBreadcrumbs Items="_breadcrumbItems" Separator="/" Class="mb-2" />
            
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="flex-wrap">
                <div>
                    <MudText Typo="Typo.h3" Color="Color.Primary" GutterBottom="true">
                        <MudIcon Icon="@(_isEditMode ? Icons.Material.Filled.Edit : Icons.Material.Filled.EventAvailable)" Class="mr-2" />
                        @(_isEditMode ? "Edit Your Experience" : "Book Your Experience")
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                        @(_isEditMode ? "Update your booking details" : "Reserve your spot for an unforgettable wildlife experience at WMSP")
                    </MudText>
                </div>
                
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Secondary" 
                           StartIcon="@Icons.Material.Filled.ArrowBack"
                           OnClick="() => NavigationService.NavigateToHome()">
                    Back to Dashboard
                </MudButton>
            </MudStack>
            
            @if (!_isEditMode)
            {
                <MudAlert Severity="MudBlazor.Severity.Info" Class="mb-4" Icon="@Icons.Material.Filled.Info">
                    <MudText Typo="Typo.body2">
                        Learn more about our VIP experiences: 
                        <MudLink Href="https://www.wmsp.co.uk/vip-experiences" Target="_blank" Color="Color.Primary" Underline="Underline.Always">
                            <strong>www.wmsp.co.uk/vip-experiences</strong>
                        </MudLink>
                    </MudText>
                </MudAlert>
            }
            else
            {
                <MudAlert Severity="MudBlazor.Severity.Warning" Class="mb-4" Icon="@Icons.Material.Filled.Edit">
                    <MudText Typo="Typo.body2">
                        <strong>Editing Mode:</strong> You are updating an existing booking. Make sure all details are correct before saving.
                    </MudText>
                </MudAlert>
            }
        </MudStack>

        <!-- Loading State -->
        @if (IsLoading)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" />
        }
        else
        {
            <MudPaper Elevation="2" Class="pa-6">
                <MudForm @ref="_form" @bind-IsValid="@_isFormValid" @bind-Errors="@_errors" ValidationDelay="300">
                    <MudGrid Spacing="4">
                        
                        <!-- Experience Selection -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.LocalActivity" Class="mr-2" />
                                Experience Details
                            </MudText>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="_experienceForm.BookingExperience" 
                                       Label="Select Experience" 
                                       Variant="Variant.Outlined" 
                                       AnchorOrigin="Origin.BottomCenter"
                                       Required="true"
                                       RequiredError="Please select an experience"
                                       HelperText="Choose from our available wildlife experiences"
                                       @onchange="OnExperienceChanged">
                                @foreach (var experience in GetAvailableExperiences())
                                {
                                    <MudSelectItem Value="experience.Key">
                                        <div class="d-flex align-center">
                                            <MudChip T="string" Color="@experience.Value.Color" Size="Size.Small" Class="mr-2">
                                                @experience.Key.ToString().Replace("Keeper", " Keeper")
                                            </MudChip>
                                            <div>
                                                <MudText Typo="Typo.body2">@experience.Value.Title</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">@experience.Value.Location • @GetExperienceDurationText(experience.Value)</MudText>
                                            </div>
                                        </div>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <!-- Date and Time Section -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" />
                                Date & Time
                            </MudText>
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudDatePicker @bind-Date="_experienceDate" 
                                           Label="Experience Date" 
                                           Variant="Variant.Outlined"
                                           Required="true"
                                           RequiredError="Please select a date"
                                           MinDate="DateTime.Today"
                                           MaxDate="DateTime.Today.AddMonths(6)"
                                           DateFormat="dd/MM/yyyy"
                                           HelperText="Select your preferred date"
                                           ShowToolbar="true"
                                           ToolBarClass="justify-center" />
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudTimePicker @bind-Time="_experienceStartTime" 
                                           Label="Start Time" 
                                           Variant="Variant.Outlined"
                                           AmPm="true"
                                           Required="true"
                                           RequiredError="Please select a start time"
                                           HelperText="Experience start time"
                                           TimeFormat="hh:mm tt"
                                           @onchange="OnStartTimeChanged" />
                        </MudItem>

                        <!-- Calculated End Time Display (Read-only) -->
                        <MudItem xs="12" md="4">
                            <MudTextField Value="@GetCalculatedEndTimeDisplay()" 
                                          Label="End Time" 
                                          Variant="Variant.Outlined"
                                          ReadOnly="true"
                                          HelperText="Automatically calculated"
                                          StartAdornment="@Icons.Material.Filled.Schedule"
                                          AdornmentColor="Color.Secondary" />
                        </MudItem>

                        <!-- Duration Info Display -->
                        @if (_selectedExperienceInfo != null)
                        {
                            <MudItem xs="12">
                                <MudAlert Severity="MudBlazor.Severity.Info" Icon="@Icons.Material.Filled.Info" Class="mt-2">
                                    <MudText Typo="Typo.body2">
                                        <strong>@_selectedExperienceInfo.Title</strong> - 
                                        @GetExperienceDurationText(_selectedExperienceInfo)
                                    </MudText>
                                </MudAlert>
                            </MudItem>
                        }

                        <!-- Personal Information Section -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                                Personal Information
                            </MudText>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_experienceForm.FirstName" 
                                          Label="First Name" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="First name is required"
                                          MaxLength="50"
                                          Counter="50"
                                          HelperText="Enter your first name" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_experienceForm.LastName" 
                                          Label="Last Name" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="Last name is required"
                                          MaxLength="50"
                                          Counter="50"
                                          HelperText="Enter your last name" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_experienceForm.ContactNumber" 
                                          Label="Contact Number" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="Contact number is required"
                                          Validation="@(new Func<string, IEnumerable<string>>(ValidatePhoneNumber))"
                                          MaxLength="15"
                                          HelperText="Enter your phone number" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_experienceForm.Postcode" 
                                          Label="Postcode" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="Postcode is required"
                                          Validation="@(new Func<string, IEnumerable<string>>(ValidatePostcode))"
                                          MaxLength="10"
                                          HelperText="Enter your postcode" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="_experienceForm.FirstLineAddress" 
                                          Label="Address" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="Address is required"
                                          MaxLength="100"
                                          Counter="100"
                                          HelperText="Enter your full address" />
                        </MudItem>

                        <!-- Additional Notes Section -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.Notes" Class="mr-2" />
                                Additional Information
                            </MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="_experienceForm.Notes" 
                                          Label="Special Requirements or Notes" 
                                          Variant="Variant.Outlined" 
                                          Lines="4"
                                          MaxLength="500"
                                          Counter="500"
                                          AutoGrow="true"
                                          HelperText="Any special requirements, dietary needs, or additional information" />
                        </MudItem>

                        <!-- Action Buttons -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudStack Row="true" Spacing="3" Justify="Justify.FlexEnd" Class="mt-4">
                                <MudButton Variant="Variant.Outlined" 
                                           Color="Color.Secondary" 
                                           StartIcon="@Icons.Material.Filled.Cancel"
                                           OnClick="CancelBooking"
                                           Disabled="IsOperationInProgress">
                                    Cancel
                                </MudButton>
                                
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           StartIcon="@(_isEditMode ? Icons.Material.Filled.Save : Icons.Material.Filled.EventAvailable)"
                                           OnClick="SaveBooking"
                                           Disabled="!_isFormValid || IsOperationInProgress">
                                    @if (IsOperationInProgress)
                                    {
                                        <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                        <MudText>@(_isEditMode ? "Updating..." : "Saving...")</MudText>
                                    }
                                    else
                                    {
                                        <MudText>@(_isEditMode ? "Update Booking" : "Book Experience")</MudText>
                                    }
                                </MudButton>
                            </MudStack>
                        </MudItem>

                    </MudGrid>
                </MudForm>
            </MudPaper>
        }
    </MudPaper>
</MudContainer>

@code {
    #region Parameters
    [Parameter] public Guid? BookingId { get; set; }
    #endregion

    #region Fields and Properties
    private bool _isFormValid;
    private string[] _errors = { };
    private MudForm? _form;
    private DateTime? _experienceDate;
    private TimeSpan? _experienceStartTime;
    private bool _isEditMode => BookingId.HasValue;
    private CalendarSlot? _existingBooking;
    private ExperienceRecord? _selectedExperienceInfo;

    private ExperienceForm _experienceForm = new();
    private Dictionary<BookingExperience, ExperienceRecord> _allExperienceInformation = new();
    
    private List<BreadcrumbItem> _breadcrumbItems = new()
    {
        new BreadcrumbItem("Dashboard", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Book Experience", href: null, disabled: true, icon: Icons.Material.Filled.EventAvailable)
    };
    #endregion

    #region Lifecycle Methods
    protected override async Task InitializePageAsync()
    {
        await LoadExperienceData();
        
        if (_isEditMode)
        {
            await LoadExistingBooking();
        }
        else
        {
            SetDefaultValues();
        }
        
        UpdateBreadcrumbs();
        UpdateSelectedExperienceInfo();
    }
    #endregion

    #region Validation Methods
    private IEnumerable<string> ValidatePhoneNumber(string phoneNumber)
    {
        if (string.IsNullOrWhiteSpace(phoneNumber))
            yield break;

        var digitsOnly = new string(phoneNumber.Where(char.IsDigit).ToArray());
        if (digitsOnly.Length < 10 || digitsOnly.Length > 15)
            yield return "Please enter a valid phone number";
    }

    private IEnumerable<string> ValidatePostcode(string postcode)
    {
        if (string.IsNullOrWhiteSpace(postcode))
            yield break;

        // UK postcode pattern (basic validation)
        var ukPostcodePattern = @"^[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][A-Z]{2}$";
        if (!System.Text.RegularExpressions.Regex.IsMatch(postcode.ToUpper(), ukPostcodePattern))
            yield return "Please enter a valid UK postcode (e.g., SW1A 1AA)";
    }
    #endregion

    #region Helper Methods
    private Dictionary<BookingExperience, ExperienceRecord> GetAvailableExperiences()
    {
        return _allExperienceInformation.Where(x => x.Key != BookingExperience.None).ToDictionary(x => x.Key, x => x.Value);
    }

    private void SetDefaultValues()
    {
        _experienceDate = DateTime.Today.AddDays(1);
        _experienceStartTime = new TimeSpan(10, 0, 0); // 10:00 AM
    }

    private void UpdateBreadcrumbs()
    {
        _breadcrumbItems[1] = new BreadcrumbItem(
            _isEditMode ? "Edit Experience" : "Book Experience", 
            href: null, 
            disabled: true, 
            icon: _isEditMode ? Icons.Material.Filled.Edit : Icons.Material.Filled.EventAvailable
        );
    }

    private void UpdateSelectedExperienceInfo()
    {
        if (_allExperienceInformation.TryGetValue(_experienceForm.BookingExperience, out var experienceInfo))
        {
            _selectedExperienceInfo = experienceInfo;
        }
        else
        {
            _selectedExperienceInfo = null;
        }
    }

    private TimeSpan? CalculateEndTime()
    {
        if (!_experienceStartTime.HasValue || _selectedExperienceInfo == null)
        {
            return null;
        }

        return _experienceStartTime.Value.Add(_selectedExperienceInfo.Length);
    }

    private string GetCalculatedEndTimeDisplay()
    {
        var endTime = CalculateEndTime();
        if (!endTime.HasValue)
        {
            return "Select start time and experience";
        }

        // Convert TimeSpan to DateTime for proper AM/PM formatting
        var endDateTime = DateTime.Today.Add(endTime.Value);
        return endDateTime.ToString("hh:mm tt");
    }

    private string GetExperienceDurationText(ExperienceRecord experience)
    {
        if (experience.AllDay)
        {
            return "All Day Experience";
        }

        var hours = experience.Length.Hours;
        var minutes = experience.Length.Minutes;

        if (hours > 0 && minutes > 0)
        {
            return $"{hours}h {minutes}m duration";
        }
        else if (hours > 0)
        {
            return $"{hours}h duration";
        }
        else if (minutes > 0)
        {
            return $"{minutes}m duration";
        }

        return "Duration varies";
    }

    private async Task LoadExistingBooking()
    {
        try
        {
            if (!BookingId.HasValue) return;

            _existingBooking = await bookingLoaderService.GetCalendarSlotByIdAsync(BookingId.Value);
            
            if (_existingBooking == null)
            {
                HandleError("Booking not found");
                NavigationService.NavigateToHome();
                return;
            }

            // Prepopulate form with existing booking data
            _experienceForm.BookingExperience = _existingBooking.BookingExperience;
            _experienceForm.FirstName = _existingBooking.FirstName;
            _experienceForm.LastName = _existingBooking.LastName;
            _experienceForm.ContactNumber = _existingBooking.ContactNumber;
            _experienceForm.FirstLineAddress = _existingBooking.FirstLineAddress;
            _experienceForm.Postcode = _existingBooking.Postcode;
            _experienceForm.Notes = _existingBooking.Text;

            // Set date and time values
            _experienceDate = _existingBooking.Start.Date;
            _experienceStartTime = _existingBooking.Start.TimeOfDay;

            Logger.LogInformation("Loaded existing booking {BookingId} for editing", BookingId.Value);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load existing booking {BookingId}", BookingId);
            HandleError("Failed to load booking details", ex);
        }
    }
    #endregion

    #region Event Handlers
    private void OnExperienceChanged(ChangeEventArgs e)
    {
        UpdateSelectedExperienceInfo();
        StateHasChanged();
    }

    private void OnStartTimeChanged(ChangeEventArgs e)
    {
        // Trigger UI update to show new calculated end time
        StateHasChanged();
    }

    private async Task SaveBooking()
    {
        if (_form == null || !_isFormValid)
        {
            ShowWarning("Please fix the form errors before saving");
            return;
        }

        await ExecuteOperationAsync(async () =>
        {
            if (!_allExperienceInformation.TryGetValue(_experienceForm.BookingExperience, out var experienceInformation))
            {
                HandleError("Selected experience is not available");
                return;
            }

            var dateStart = _experienceDate!.Value.Date + _experienceStartTime!.Value;
            var dateEnd = dateStart.Add(experienceInformation.Length);

            if (_isEditMode && _existingBooking != null)
            {
                // Update existing booking
                _existingBooking.Title = experienceInformation.Title;
                _existingBooking.Color = experienceInformation.Color;
                _existingBooking.Location = experienceInformation.Location;
                _existingBooking.Start = dateStart;
                _existingBooking.End = dateEnd;
                _existingBooking.AllDay = experienceInformation.AllDay;
                _existingBooking.BookingExperience = experienceInformation.BookingExperience;
                _existingBooking.ContactNumber = _experienceForm.ContactNumber!;
                _existingBooking.FirstLineAddress = _experienceForm.FirstLineAddress!;
                _existingBooking.FirstName = _experienceForm.FirstName!;
                _existingBooking.LastName = _experienceForm.LastName!;
                _existingBooking.Postcode = _experienceForm.Postcode!;
                _existingBooking.Text = _experienceForm.Notes ?? string.Empty;

                await bookingLoaderService.UpdateCalendarSlot(_existingBooking);

                ShowSuccess($"Successfully updated {experienceInformation.Title} booking for {dateStart:dddd, MMMM dd, yyyy} at {dateStart:hh:mm tt}");
            }
            else
            {
                // Create new booking
                var calendarSlot = new CalendarSlot
                {
                    // Experience details
                    Title = experienceInformation.Title,
                    Color = experienceInformation.Color,
                    Location = experienceInformation.Location,
                    Start = dateStart,
                    End = dateEnd,
                    AllDay = experienceInformation.AllDay,
                    BookingExperience = experienceInformation.BookingExperience,

                    // Personal information
                    ContactNumber = _experienceForm.ContactNumber!,
                    FirstLineAddress = _experienceForm.FirstLineAddress!,
                    FirstName = _experienceForm.FirstName!,
                    LastName = _experienceForm.LastName!,
                    Postcode = _experienceForm.Postcode!,

                    // Additional information
                    Text = _experienceForm.Notes ?? string.Empty,
                };

                await bookingLoaderService.SaveCalendarSlot(calendarSlot);

                ShowSuccess($"Successfully booked {experienceInformation.Title} for {dateStart:dddd, MMMM dd, yyyy} at {dateStart:hh:mm tt}");
            }
            
            // Navigate back to home after successful booking
            await Task.Delay(1500); // Brief delay to show success message
            NavigationService.NavigateToHome();
            
        }, _isEditMode ? "Update booking" : "Save booking");
    }

    private void CancelBooking()
    {
        NavigationService.NavigateToHome();
    }
    #endregion

    #region Private Methods
    private async Task LoadExperienceData()
    {
        try
        {
            ClearErrors();
            _allExperienceInformation = await bookingLoaderService.GetExperienceInfo();
            Logger.LogInformation("Loaded {ExperienceCount} experience types", _allExperienceInformation.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load experience information");
            HandleError("Failed to load experience information", ex);
        }
    }

    protected override void LogError(string message, Exception? exception)
    {
        Logger.LogError(exception, message);
    }
    #endregion
}
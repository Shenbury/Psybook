@page "/Book"
@using Psybook.Objects.DbModels
@using Psybook.Objects.Enums
@using Psybook.Services.UI.DataLoaders
@using Psybook.Shared.Dictionary
@using Psybook.Shared.PageModels
@using FluentValidation
@inject NavigationManager Navigation

@inject IBookingLoaderService bookingLoaderService;

<PageTitle>Booking Form</PageTitle>

<MudText Typo="Typo.h2" GutterBottom="true">Book In Experience</MudText>
<MudText Typo="Typo.h5" GutterBottom="true">Our empowering booking system</MudText>

<MudAlert Severity="MudBlazor.Severity.Normal" ContentAlignment="HorizontalAlignment.Start">
    You can see the WMSP VIP details here:
    <MudLink Href="https://www.wmsp.co.uk/vip-experiences" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
        <b>www.wmsp.co.uk/vip-experiences</b>
    </MudLink>
</MudAlert>

<br />

<MudPaper Class="pa-4">
    <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">

        <MudSelect @bind-Value="_experienceForm.BookingExperience" Label="Experience to book" Variant="Variant.Outlined" Validation="() => _experienceForm.BookingExperience != BookingExperience.None">
            @foreach (var bookExperiences in Enum.GetValues(typeof(BookingExperience)).Cast<BookingExperience>())
            {
                if (bookExperiences != BookingExperience.None)
                {
                    <MudSelectItem Value="bookExperiences">@bookExperiences</MudSelectItem>
                }
            }
        </MudSelect>

        <MudDatePicker Label="Date of Experience" @bind-Date="_experienceDate" DateFormat="dd.MM.yyyy" Validation="@EndTimeAfterStartValidator" ShowToolbar="false" Class="thin-timepicker" />

        <MudTimePicker Label="Start Time"
                       AmPm="true"
                       @bind-Time="_experienceStartTime"
                       Validation="@EndTimeAfterStartValidator",
                       Class="thin-timepicker" />

        <MudTimePicker Label="End Time" AmPm="true" @bind-Time="_experienceEndTime" Validation="@notEmptyValidator.Validation" Class="thin-timepicker" />

        <MudTextField @bind-Value="_experienceForm.FirstName" Label="First Name" Variant="Variant.Outlined" Validation="@notEmptyValidator.Validation"></MudTextField>

        <MudTextField @bind-Value="_experienceForm.LastName" Label="Last Name" Variant="Variant.Outlined" Validation="@notEmptyValidator.Validation"></MudTextField>

        <MudTextField @bind-Value="_experienceForm.ContactNumber" Label="Contact Number" Variant="Variant.Outlined" Validation="@notEmptyValidator.Validation"></MudTextField>

        <MudTextField @bind-Value="_experienceForm.FirstLineAddress" Label="First Line Address" Variant="Variant.Outlined" Validation="@notEmptyValidator.Validation"></MudTextField>

        <MudTextField @bind-Value="_experienceForm.Postcode" Label="Postcode" Variant="Variant.Outlined" Validation="@notEmptyValidator.Validation"></MudTextField>

        <MudTextField T="string" Label="Any experience notes" Variant="Variant.Text" Text="@_experienceForm.Notes" AutoGrow Lines="3" HelperText="Add any notes for the experience" />

        <br />

        <MudButton OnClick="Save" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Medium">Save</MudButton>

    </MudForm>   
</MudPaper>

@code {
    private bool _success;
    private string[] _errors = { };
    private MudForm? _form;
    private DateTime? _experienceDate;
    private TimeSpan? _experienceStartTime;
    private TimeSpan? _experienceEndTime;

    private ExperienceForm _experienceForm = new();

    private Dictionary<BookingExperience, ExperienceRecord> _allExperienceInformation { get; set; } = [];

    private IEnumerable<string> EndTimeAfterStartValidator(TimeSpan? endTime)
    {
        if (!_experienceStartTime.HasValue || !endTime.HasValue)
            yield break; // Let required/empty validators handle this

        if (endTime <= _experienceStartTime)
            yield return "End Time must be after Start Time";
    }

    protected async Task Save()
    {
        ExperienceRecord experienceInformation = _allExperienceInformation.Single(x => x.Key == _experienceForm.BookingExperience).Value;

        var dateStart = _experienceDate + _experienceStartTime;
        var dateEnd = _experienceDate + _experienceEndTime;

        await bookingLoaderService.SaveCalendarSlot(new CalendarSlot
            {
            // Experience
                Title = experienceInformation.Title,
                Color = experienceInformation.Color,
                Location = experienceInformation.Location,
                Start = dateStart!.Value,
                End = dateEnd,
                AllDay = experienceInformation.AllDay,
                BookingExperience = experienceInformation.BookingExperience,

            // Personals
                ContactNumber = _experienceForm.ContactNumber,
                FirstLineAddress = _experienceForm.FirstLineAddress,
                FirstName = _experienceForm.FirstName,
                LastName = _experienceForm.LastName,
                Postcode = _experienceForm.Postcode,

            // Anything else
                Text = _experienceForm.Notes,
            });

        Navigation.NavigateTo("/");
    }

    FluentValueValidator<string> notEmptyValidator = new FluentValueValidator<string>(x => x
    .NotEmpty());

    FluentValueValidator<DateTime?> notMinimumValueOrNull = new FluentValueValidator<DateTime?>(x => x
    .NotEmpty()
    .NotEqual(DateTime.MinValue)
    .NotNull());

    public class FluentValueValidator<T> : AbstractValidator<T>
    {
        public FluentValueValidator(Action<IRuleBuilderInitial<T, T>> rule)
        {
            rule(RuleFor(x => x));
        }

        private IEnumerable<string> ValidateValue(T arg)
        {
            var result = Validate(arg);
            if (result.IsValid)
                return new string[0];
            return result.Errors.Select(e => e.ErrorMessage);
        }

        public Func<T, IEnumerable<string>> Validation => ValidateValue;
    }

    protected override async Task OnInitializedAsync()
    {
        _allExperienceInformation = await bookingLoaderService.GetExperienceInfo();
    }
}
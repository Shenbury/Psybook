@page "/Book"
@using Microsoft.Extensions.Logging
@using Psybook.Objects.DbModels
@using Psybook.Objects.Enums
@using Psybook.Services.UI.DataLoaders
@using Psybook.Shared.Dictionary
@using Psybook.Shared.PageModels
@using FluentValidation
@using MudBlazor
@using Psybook.UI.Client.Components
@inherits BasePageComponent
@inject IBookingLoaderService bookingLoaderService
@inject ILogger<Book> Logger

<PageTitle>Book Experience - WMSP</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudPaper Elevation="0" Class="pa-6">
        <!-- Header Section -->
        <MudStack Spacing="4" Class="mb-6">
            <MudBreadcrumbs Items="_breadcrumbItems" Separator="/" Class="mb-2" />
            
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="flex-wrap">
                <div>
                    <MudText Typo="Typo.h3" Color="Color.Primary" GutterBottom="true">
                        <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Class="mr-2" />
                        Book Your Experience
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                        Reserve your spot for an unforgettable wildlife experience at WMSP
                    </MudText>
                </div>
                
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Secondary" 
                           StartIcon="@Icons.Material.Filled.ArrowBack"
                           OnClick="() => NavigationService.NavigateToHome()">
                    Back to Dashboard
                </MudButton>
            </MudStack>
            
            <MudAlert Severity="MudBlazor.Severity.Info" Class="mb-4" Icon="@Icons.Material.Filled.Info">
                <MudText Typo="Typo.body2">
                    Learn more about our VIP experiences: 
                    <MudLink Href="https://www.wmsp.co.uk/vip-experiences" Target="_blank" Color="Color.Primary" Underline="Underline.Always">
                        <strong>www.wmsp.co.uk/vip-experiences</strong>
                    </MudLink>
                </MudText>
            </MudAlert>
        </MudStack>

        <!-- Loading State -->
        @if (IsLoading)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" />
        }
        else
        {
            <MudPaper Elevation="2" Class="pa-6">
                <MudForm @ref="_form" @bind-IsValid="@_isFormValid" @bind-Errors="@_errors" ValidationDelay="300">
                    <MudGrid Spacing="4">
                        
                        <!-- Experience Selection -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.LocalActivity" Class="mr-2" />
                                Experience Details
                            </MudText>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="_experienceForm.BookingExperience" 
                                       Label="Select Experience" 
                                       Variant="Variant.Outlined" 
                                       AnchorOrigin="Origin.BottomCenter"
                                       Required="true"
                                       RequiredError="Please select an experience"
                                       HelperText="Choose from our available wildlife experiences">
                                @foreach (var experience in GetAvailableExperiences())
                                {
                                    <MudSelectItem Value="experience.Key">
                                        <div class="d-flex align-center">
                                            <MudChip T="string" Color="@experience.Value.Color" Size="Size.Small" Class="mr-2">
                                                @experience.Key.ToString().Replace("Keeper", " Keeper")
                                            </MudChip>
                                            <div>
                                                <MudText Typo="Typo.body2">@experience.Value.Title</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">@experience.Value.Location</MudText>
                                            </div>
                                        </div>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <!-- Date and Time Section -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" />
                                Date & Time
                            </MudText>
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudDatePicker @bind-Date="_experienceDate" 
                                           Label="Experience Date" 
                                           Variant="Variant.Outlined"
                                           Required="true"
                                           RequiredError="Please select a date"
                                           MinDate="DateTime.Today"
                                           MaxDate="DateTime.Today.AddMonths(6)"
                                           DateFormat="dd/MM/yyyy"
                                           HelperText="Select your preferred date"
                                           ShowToolbar="true"
                                           ToolBarClass="justify-center" />
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudTimePicker @bind-Time="_experienceStartTime" 
                                           Label="Start Time" 
                                           Variant="Variant.Outlined"
                                           AmPm="true"
                                           Required="true"
                                           RequiredError="Please select a start time"
                                           HelperText="Experience start time"
                                           TimeFormat="hh:mm tt" />
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudTimePicker @bind-Time="_experienceEndTime" 
                                           Label="End Time" 
                                           Variant="Variant.Outlined"
                                           AmPm="true"
                                           Required="true"
                                           RequiredError="Please select an end time"
                                           Validation="@(new Func<TimeSpan?, IEnumerable<string>>(ValidateEndTime))"
                                           HelperText="Experience end time"
                                           TimeFormat="hh:mm tt" />
                        </MudItem>

                        <!-- Personal Information Section -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                                Personal Information
                            </MudText>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_experienceForm.FirstName" 
                                          Label="First Name" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="First name is required"
                                          MaxLength="50"
                                          Counter="50"
                                          HelperText="Enter your first name" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_experienceForm.LastName" 
                                          Label="Last Name" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="Last name is required"
                                          MaxLength="50"
                                          Counter="50"
                                          HelperText="Enter your last name" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_experienceForm.ContactNumber" 
                                          Label="Contact Number" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="Contact number is required"
                                          Validation="@(new Func<string, IEnumerable<string>>(ValidatePhoneNumber))"
                                          MaxLength="15"
                                          HelperText="Enter your phone number" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_experienceForm.Postcode" 
                                          Label="Postcode" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="Postcode is required"
                                          Validation="@(new Func<string, IEnumerable<string>>(ValidatePostcode))"
                                          MaxLength="10"
                                          HelperText="Enter your postcode" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="_experienceForm.FirstLineAddress" 
                                          Label="Address" 
                                          Variant="Variant.Outlined" 
                                          Required="true"
                                          RequiredError="Address is required"
                                          MaxLength="100"
                                          Counter="100"
                                          HelperText="Enter your full address" />
                        </MudItem>

                        <!-- Additional Notes Section -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.Notes" Class="mr-2" />
                                Additional Information
                            </MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="_experienceForm.Notes" 
                                          Label="Special Requirements or Notes" 
                                          Variant="Variant.Outlined" 
                                          Lines="4"
                                          MaxLength="500"
                                          Counter="500"
                                          AutoGrow="true"
                                          HelperText="Any special requirements, dietary needs, or additional information" />
                        </MudItem>

                        <!-- Action Buttons -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudStack Row="true" Spacing="3" Justify="Justify.FlexEnd" Class="mt-4">
                                <MudButton Variant="Variant.Outlined" 
                                           Color="Color.Secondary" 
                                           StartIcon="@Icons.Material.Filled.Cancel"
                                           OnClick="CancelBooking"
                                           Disabled="IsOperationInProgress">
                                    Cancel
                                </MudButton>
                                
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Filled.Save"
                                           OnClick="SaveBooking"
                                           Disabled="!_isFormValid || IsOperationInProgress">
                                    @if (IsOperationInProgress)
                                    {
                                        <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                        <MudText>Saving...</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Book Experience</MudText>
                                    }
                                </MudButton>
                            </MudStack>
                        </MudItem>

                    </MudGrid>
                </MudForm>
            </MudPaper>
        }
    </MudPaper>
</MudContainer>

@code {
    #region Fields and Properties
    private bool _isFormValid;
    private string[] _errors = { };
    private MudForm? _form;
    private DateTime? _experienceDate;
    private TimeSpan? _experienceStartTime;
    private TimeSpan? _experienceEndTime;

    private ExperienceForm _experienceForm = new();
    private Dictionary<BookingExperience, ExperienceRecord> _allExperienceInformation = new();
    
    private List<BreadcrumbItem> _breadcrumbItems = new()
    {
        new BreadcrumbItem("Dashboard", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Book Experience", href: null, disabled: true, icon: Icons.Material.Filled.EventAvailable)
    };
    #endregion

    #region Lifecycle Methods
    protected override async Task InitializePageAsync()
    {
        await LoadExperienceData();
        SetDefaultValues();
    }
    #endregion

    #region Validation Methods
    private IEnumerable<string> ValidateEndTime(TimeSpan? endTime)
    {
        if (!_experienceStartTime.HasValue || !endTime.HasValue)
            yield break;

        if (endTime <= _experienceStartTime)
            yield return "End time must be after start time";

        var duration = endTime.Value - _experienceStartTime.Value;
        if (duration.TotalMinutes < 30)
            yield return "Experience must be at least 30 minutes long";

        if (duration.TotalHours > 8)
            yield return "Experience cannot exceed 8 hours";
    }

    private IEnumerable<string> ValidatePhoneNumber(string phoneNumber)
    {
        if (string.IsNullOrWhiteSpace(phoneNumber))
            yield break;

        var digitsOnly = new string(phoneNumber.Where(char.IsDigit).ToArray());
        if (digitsOnly.Length < 10 || digitsOnly.Length > 15)
            yield return "Please enter a valid phone number";
    }

    private IEnumerable<string> ValidatePostcode(string postcode)
    {
        if (string.IsNullOrWhiteSpace(postcode))
            yield break;

        // UK postcode pattern (basic validation)
        var ukPostcodePattern = @"^[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][A-Z]{2}$";
        if (!System.Text.RegularExpressions.Regex.IsMatch(postcode.ToUpper(), ukPostcodePattern))
            yield return "Please enter a valid UK postcode (e.g., SW1A 1AA)";
    }
    #endregion

    #region Helper Methods
    private Dictionary<BookingExperience, ExperienceRecord> GetAvailableExperiences()
    {
        return _allExperienceInformation.Where(x => x.Key != BookingExperience.None).ToDictionary(x => x.Key, x => x.Value);
    }

    private void SetDefaultValues()
    {
        _experienceDate = DateTime.Today.AddDays(1);
        _experienceStartTime = new TimeSpan(10, 0, 0); // 10:00 AM
        _experienceEndTime = new TimeSpan(12, 0, 0);   // 12:00 PM
    }
    #endregion

    #region Event Handlers
    private async Task SaveBooking()
    {
        if (_form == null || !_isFormValid)
        {
            ShowWarning("Please fix the form errors before saving");
            return;
        }

        await ExecuteOperationAsync(async () =>
        {
            if (!_allExperienceInformation.TryGetValue(_experienceForm.BookingExperience, out var experienceInformation))
            {
                HandleError("Selected experience is not available");
                return;
            }

            var dateStart = _experienceDate!.Value.Date + _experienceStartTime!.Value;
            var dateEnd = _experienceDate!.Value.Date + _experienceEndTime!.Value;

            var calendarSlot = new CalendarSlot
            {
                // Experience details
                Title = experienceInformation.Title,
                Color = experienceInformation.Color,
                Location = experienceInformation.Location,
                Start = dateStart,
                End = dateEnd,
                AllDay = experienceInformation.AllDay,
                BookingExperience = experienceInformation.BookingExperience,

                // Personal information
                ContactNumber = _experienceForm.ContactNumber!,
                FirstLineAddress = _experienceForm.FirstLineAddress!,
                FirstName = _experienceForm.FirstName!,
                LastName = _experienceForm.LastName!,
                Postcode = _experienceForm.Postcode!,

                // Additional information
                Text = _experienceForm.Notes ?? string.Empty,
            };

            await bookingLoaderService.SaveCalendarSlot(calendarSlot);

            ShowSuccess($"Successfully booked {experienceInformation.Title} for {dateStart:dddd, MMMM dd, yyyy} at {dateStart:hh:mm tt}");
            
            // Navigate back to home after successful booking
            await Task.Delay(1500); // Brief delay to show success message
            NavigationService.NavigateToHome();
            
        }, "Save booking");
    }

    private void CancelBooking()
    {
        NavigationService.NavigateToHome();
    }
    #endregion

    #region Private Methods
    private async Task LoadExperienceData()
    {
        try
        {
            ClearErrors();
            _allExperienceInformation = await bookingLoaderService.GetExperienceInfo();
            Logger.LogInformation("Loaded {ExperienceCount} experience types", _allExperienceInformation.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load experience information");
            HandleError("Failed to load experience information", ex);
        }
    }

    protected override void LogError(string message, Exception? exception)
    {
        Logger.LogError(exception, message);
    }
    #endregion
}